defProperty('source1', "nodec-gimidev1", "ID of a resource")
defProperty('intervalcol',"1", "Interval to Tail")

defProperty('pathfile', "/root/wimaxss.csv", "Path to file")



defApplication('ofstats') do |app|
  app.description = 'Simple Definition for the of-collect application'
  # Define the path to the binary executable for this application
  app.binary_path = '/usr/local/bin/ofcollect.rb'
  app.defProperty('target', 'Address to output file', '-f', {:type => :string})
  app.defProperty("interval","Interval",'-i', {:type => :string})
  app.defMeasurement('wrapper_wimaxss') do |m|
    m.defMetric('ifacemac', :string)
    m.defMetric('ssid',:int64)
    m.defMetric('netoper', :string)
  end
end
defGroup('Source1', property.source1) do |node|
  node.addApplication("ofstats") do |app|
    app.setProperty('target', property.pathfile)
    app.setProperty('interval', property.intervalcol)
    app.measure('wrapper_wimaxss', :samples => 1)
  end
end


onEvent(:ALL_UP_AND_INSTALLED) do |event|
  info "Starting the collect"
  after 2 do
    group('Source1').startApplications
  end
  after 800 do
    info "Stopping the collect"
    allGroups.stopApplications
    Experiment.done
  end
end

defGraph 'SSID' do |g|
  g.ms('wrapper_wimaxss').select(:oml_ts_client, :ssid, :ifacemac) 
  g.caption "SSID"
  g.type 'line_chart3'
  g.mapping :x_axis => :oml_ts_client, :y_axis => :ssid, :group_by => :ifacemac
  g.xaxis :legend => 'unix_ts'
  g.yaxis :legend => 'SSID', :ticks => {:format => 's'}
end
defGraph 'SSID' do |g|
  g.ms('wrapper_wimaxss').select(:oml_ts_client, :ssid, :netoper)
  g.caption "SSID of Carriers"
  g.type 'histogram2'
  g.mapping :value => :ssid, :group_by => :netoper
  g.xaxis :legend => 'Unix TS'
  g.yaxis :legend => 'SSID'
end

